{"version":3,"sources":["utils/index.js","store/actions/auth.js","containers/layout/Layout.js","containers/auth/Login.js","containers/auth/Signup.js","containers/dashboard/profile/Profile.js","containers/dashboard/notifications/Notifications.js","containers/dashboard/annonces/Annonces.js","containers/dashboard/Account.js","containers/search/Search.js","containers/static-pages/StaticPage.js","containers/static-pages/StaticPageDetail.js","routes.js","App.js","serviceWorker.js","index.js","store/reducers/auth.js","store/reducers/index.js","store/configureStore.prod.js","store/constants/index.js","store/configureStore.js"],"names":["checkHttpStatus","response","status","error","Error","statusText","parseJSON","json","axios","create","baseUrl","withCredentials","headers","Authorization","localStorage","getItem","xsrfCookieName","xsrfHeaderName","interceptors","request","use","config","Promise","reject","authLoginUserSuccess","token","user","setItem","JSON","stringify","type","AUTH_LOGIN_USER_SUCCESS","payload","resetAuthLoginUserFailure","RESET_AUTH_LOGIN_USER_FAILURE","authLoginUserFailure","message","removeItem","AUTH_LOGIN_USER_FAILURE","authLoginUserRequest","AUTH_LOGIN_USER_REQUEST","authLogout","AUTH_LOGOUT_USER","checkAuthTimeout","expirationTime","dispatch","setTimeout","CustomLayout","renderCopyright","copyright","Date","getFullYear","__html","this","props","isAuthenticated","children","pathname","location","includes","className","to","exact","activeClassName","dangerouslySetInnerHTML","Component","withRouter","connect","state","isAuthenticathed","auth","logout","authActions","Login","username","password","handleChange","e","setState","target","name","value","handleSubmit","preventDefault","login","push","reset","loading","statusTextClassNames","classNames","indexOf","onSubmit","onChange","placeholder","toString","disabled","isAuthenticating","redirect","post","email","then","catch","data","non_field_errors","resolve","authLoginUser","RegistrationForm","password1","password2","signup","res","key","expirationDate","getTime","err","authSignup","ProductTable","items","React","useState","sortConfig","setSortConfig","sortedItems","useMemo","sortableItems","sort","a","b","direction","requestSort","useSortableData","products","getClassNamesFor","undefined","Button","onClick","map","product","id","price","stock","Profile","role","aria-label","Notifications","Annonces","Account","selectedIndex","tabs","title","url","Pane","display","Tablist","marginBottom","flexBasis","marginRight","tab","index","SidebarTab","onSelect","isSelected","aria-controls","padding","background","flex","aria-labelledby","aria-hidden","path","component","Search","StaticPage","StaticPageDetail","BaseRouter","App","onTryAutoSignup","Boolean","window","hostname","match","store","configureStore","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","initialState","userName","combineReducers","action","Object","assign","routing","routerReducer","history","reduxRouterMiddleware","routerMiddleware","middleware","applyMiddleware","thunk","createStore","rootReducer","module","exports","require"],"mappings":"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","file":"static/js/main.fd11ed83.chunk.js","sourcesContent":["import axios from 'axios'\n\nexport function checkHttpStatus(response) {\n    if (response.status >= 200 && response.status < 300) {\n        return response;\n    }\n\n    const error = new Error(response.statusText);\n    error.response = response;\n    throw error;\n}\n\nexport function parseJSON(response) {\n    return response.json();\n}\n\nexport const authAxios = axios.create({\n    baseUrl: '/',\n    withCredentials: 'true',\n    headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        Authorization: `Token ${localStorage.getItem('token')}`\n    },\n    xsrfCookieName: 'csrftoken',\n    xsrfHeaderName: 'X-CSRFToken'\n})\n\nauthAxios.interceptors.request.use(config => {\n    config.headers = {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        Authorization: `Token ${localStorage.getItem('token')}`\n    }\n        return config\n    }, function (error) {\n        return Promise.reject(error)\n    })\n\n","import axios from 'axios';\nimport { push } from 'react-router-redux';\nimport { checkHttpStatus, parseJSON } from '../../utils';\nimport {\n    AUTH_LOGIN_USER_REQUEST,\n    AUTH_LOGIN_USER_FAILURE,\n    AUTH_LOGIN_USER_SUCCESS,\n    AUTH_LOGOUT_USER,\n    RESET_AUTH_LOGIN_USER_FAILURE\n} from '../constants';\n\nexport function authLoginUserSuccess(token, user) {\n    localStorage.setItem('token', token);\n    localStorage.setItem('user', JSON.stringify(user));\n    return {\n        type: AUTH_LOGIN_USER_SUCCESS,\n        payload: {\n            token,\n            user\n        }\n    };\n}\n\nexport function resetAuthLoginUserFailure() {\n    return {\n        type: RESET_AUTH_LOGIN_USER_FAILURE\n    };\n}\n\nexport function authLoginUserFailure(error, message) {\n    localStorage.removeItem('token');\n    return {\n        type: AUTH_LOGIN_USER_FAILURE,\n        payload: {\n            status: error,\n            statusText: message\n        }\n    };\n}\n\nexport function authLoginUserRequest() {\n    return {\n        type: AUTH_LOGIN_USER_REQUEST\n    };\n}\n\nexport function authLogout() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    localStorage.removeItem('expirationDate')\n    return {\n        type: AUTH_LOGOUT_USER\n    };\n}\n\nexport const checkAuthTimeout = expirationTime => {\n    return dispatch => {\n        setTimeout(() => {\n            dispatch(authLogout())\n        }, expirationTime * 1000)\n    }\n}\n\nexport function authLogoutAndRedirect() {\n    return (dispatch, state) => {\n        dispatch(authLogout());\n        dispatch(push('/login'));\n        return Promise.resolve(); // TODO: we need a promise here because of the tests, find a better way\n    };\n}\n\nexport function authLoginUser(username, password, redirect = '/') {\n    return (dispatch) => {\n        dispatch(authLoginUserRequest());\n        axios\n            .post('/rest-auth/login/', {\n                email: username,\n                password: password\n            })\n            .then(checkHttpStatus)\n            .then(parseJSON)\n            .then(response => {\n                dispatch(authLoginUserSuccess(response.token, response.user));\n                dispatch(push(redirect));\n            })\n            .catch((error) => {\n                if (error && typeof error.response !== 'undefined' && error.response.status === 401) {\n                    // Invalid authentication credentials\n                    return error.response.json().then((data) => {\n                        dispatch(authLoginUserFailure(401, data.non_field_errors[0]));\n                    });\n                } else if (error && typeof error.response !== 'undefined' && error.response.status >= 500) {\n                    // Server side error\n                    dispatch(authLoginUserFailure(500, 'A server error occurred while sending your data!'));\n                } else {\n                    // Most likely connection issues\n                    dispatch(authLoginUserFailure('Connection Error', 'An error occurred while sending your data!'));\n                }\n\n                return Promise.resolve(); // TODO: we need a promise here because of the tests, find a better way\n            });\n    };\n}\n\nexport const authSignup = (email, password1, password2) => {\n    return dispatch => {\n        dispatch(authLoginUserRequest())\n        axios\n            .post('/rest-auth/registration/', {\n                email: email,\n                password1: password1,\n                password2: password2\n            })\n            .then(res => {\n                const token = res.data.key\n                const user = res.data.user\n                const expirationDate = new Date(new Date().getTime() + 3600 * 1000)\n                localStorage.setItem('token', token)\n                localStorage.setItem('user', user)\n                localStorage.setItem('expirationDate', expirationDate)\n                dispatch(authLoginUserSuccess(token, user))\n                dispatch(checkAuthTimeout(3600))\n            })\n            .catch(err => {\n                dispatch(authLoginUserFailure(401, err))\n            })\n    }\n}\n\nexport const authCheckState = () => {\n    return dispatch => {\n        const token = localStorage.getItem('token')\n        const user = localStorage.getItem('user')\n        if (token === undefined) {\n            dispatch(authLogout())\n        } else {\n            const expirationDate = new Date(localStorage.getItem('expirationDate'))\n            if (expirationDate <= new Date()) {\n                dispatch(authLogout())\n            } else {\n                dispatch(authLoginUserSuccess(token, user))\n                dispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000))\n            }\n        }\n    }\n}","import React, { Component } from 'react';\nimport { Link, withRouter, NavLink } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport * as authActions from '../../store/actions/auth';\n\nclass CustomLayout extends Component {\n  \n  renderCopyright = () => {\n    const copyright = new Date().getFullYear();\n    return {__html: `&copy; ${copyright} Dopejob`};\n  }\n  render() {\n      const { isAuthenticated, children, location: { pathname } } = this.props;\n      return (\n        <div>\n          { (pathname).includes('login') || (pathname).includes('signup') ?\n          <div></div> :\n          <nav className=\"navbar\">\n              <NavLink\n                className=\"navbar__link\"\n                to=\"/\"\n              >\n                logo\n              </NavLink>\n              <NavLink\n                exact\n                activeClassName=\"navbar__link--active\"\n                className=\"navbar__link\"\n                to=\"/\"\n              >\n                Search\n              </NavLink>\n              {isAuthenticated ?\n              <NavLink\n                exact\n                activeClassName=\"navbar__link--active\"\n                className=\"navbar__link\"\n                to=\"/mon-compte/profil\"\n              >\n                Mon espace\n              </NavLink>\n              :\n              <NavLink\n                exact\n                activeClassName=\"navbar__link--active\"\n                className=\"navbar__link fl-r\"\n                to=\"/login\"\n              >\n                Se connecter\n              </NavLink>\n              }\n          </nav>\n          }\n          {children}\n          <footer className=\"footer\">\n            <ul>\n              <li className=\"fl-l\" dangerouslySetInnerHTML={this.renderCopyright()}></li>\n              <li className=\"fl-l\"><Link to=\"/legal\" className=\"link\">Politique relative aux cookies, politique de confidentialité et conditions d'utilisation</Link></li>\n            </ul>\n          </footer>\n        </div>\n      )\n  }\n}\n\n/*\n\n© 2020 Indeed\nCentre de confidentialité\n\n*/\n\nconst mapStateToProps = state => {\n  return {\n    isAuthenticathed: !!state.auth.isAuthenticathed\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n      logout: () => dispatch(authActions.authLogout())\n  }\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(CustomLayout))\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { push } from 'react-router-redux';\nimport classNames from 'classnames';\nimport { authLoginUser, resetAuthLoginUserFailure } from '../../store/actions/auth';\n\nclass Login extends Component {\n\n    state = {\n      username: '',\n      password: ''\n    }\n\n    UNSAFE_componentWillMount() {\n      if (this.props.isAuthenticated) {\n          this.props.dispatch(push('/mon-compte/profil'));\n      }\n    }\n\n    componentWillUnmount() {\n      this.props.reset()\n    }\n\n    handleChange = e => {\n      this.setState({ [e.target.name]: e.target.value })\n    }\n  \n    handleSubmit = e => {\n      e.preventDefault()\n      const { username, password } = this.state\n      this.props.login(username, password)\n    }\n\n    render() {\n      const { loading, isAuthenticated } = this.props;\n      const { username, password } = this.state;\n      let statusText = null;\n      if (this.props.statusText) {\n        const statusTextClassNames = classNames({\n            'alert': true,\n            'alert-danger': this.props.statusText.indexOf('Authentication Error') === 0,\n            'alert-success': this.props.statusText.indexOf('Authentication Error') !== 0\n        });\n\n        statusText = (\n            <div className=\"row\">\n                <div className=\"col-sm-12\">\n                    <div className={statusTextClassNames}>\n                        {this.props.statusText}\n                    </div>\n                </div>\n            </div>\n        );\n      }\n      return (\n        <div className=\"container login\">\n          <h1>Connexion</h1>\n          <div>\n            {statusText}\n            <form onSubmit={this.handleSubmit}>\n              <input type=\"email\"\n                onChange={this.handleChange}\n                value={username}\n                name=\"username\"\n                placeholder=\"E-mail\"\n              />\n              <input type=\"password\"\n                onChange={this.handleChange}\n                value={password}\n                placeholder=\"Mot de passe\"\n                name=\"password\" \n              />\n\n              <button type=\"submit\"\n                loading={loading.toString()}\n                disabled={loading || isAuthenticated}\n              >\n                Connexion\n              </button>\n            </form>\n            <div>\n            Vous n’êtes pas encore membre ? <Link className=\"link\" to=\"/signup\">Créez un compte gratuitement</Link>\n            </div>\n          </div>\n        </div>\n      )\n    }\n}\n\nconst mapStateToProps = state => {\n  return {\n      loading: state.auth.loading,\n      isAuthenticated: state.auth.isAuthenticated,\n      isAuthenticating: state.auth.isAuthenticating,\n      statusText: state.auth.statusText\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n      login: (username, password) => dispatch(authLoginUser(username, password, '/mon-compte/profil')),\n      reset: () => dispatch(resetAuthLoginUserFailure())\n  }\n}\n  \nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { authSignup, resetAuthLoginUserFailure } from '../../store/actions/auth';\n\nclass RegistrationForm extends Component {\n\n    state = {\n        email: '',\n        password1: '',\n        password2: ''\n    }\n\n\n    handleChange = e => {\n      this.setState({ [e.target.name]: e.target.value })\n    }\n  \n    handleSubmit = e => {\n      e.preventDefault()\n      const { email, password1, password2 } = this.state\n      this.props.signup(email, password1, password2)\n    }\n\n    componentWillUnmount() {\n      this.props.reset()\n    }\n\n    render() {\n      const { loading } = this.props;\n      const { email, password1, password2 } = this.state\n      let statusText = null;\n      if (this.props.statusText) {\n        const statusTextClassNames = classNames({\n            'alert': true,\n            'alert-danger': this.props.statusText.indexOf('Authentication Error') === 0,\n            'alert-success': this.props.statusText.indexOf('Authentication Error') !== 0\n        });\n\n        statusText = (\n            <div className=\"row\">\n                <div className=\"col-sm-12\">\n                    <div className={statusTextClassNames}>\n                        {this.props.statusText}\n                    </div>\n                </div>\n            </div>\n        );\n      }\n      return (\n        <div className=\"container signup\">\n          <h1>Créer un compte gratuitement</h1>\n          <div>\n            {statusText}\n            <form onSubmit={this.handleSubmit}>\n              <input type=\"email\"\n                onChange={this.handleChange}\n                value={email}\n                name=\"email\"\n                placeholder=\"E-mail\"\n              />\n              <input type=\"password\"\n                onChange={this.handleChange}\n                value={password1}\n                placeholder=\"Mot de passe\"\n                name=\"password1\" \n              />\n              <input type=\"password\"\n                onChange={this.handleChange}\n                value={password2}\n                placeholder=\"Confirmer mot de passe\"\n                name=\"password2\" \n              />\n\n              <button type=\"submit\"\n                loading={loading.toString()}\n                disabled={loading}\n              >\n                Connexion\n              </button>\n            </form>\n            <div>\n            Vous avez un compte ? <Link to=\"/login\">Connectez-vous</Link>\n            </div>\n            <div>\n                <Link to=\"/\">Mot de passe oublié ?</Link>\n            </div>\n          </div>\n        </div>\n      )\n    }\n}\n\nconst mapStateToProps = state => {\n  return {\n      loading: state.auth.loading,\n      isAuthenticated: state.auth.isAuthenticated,\n      isAuthenticating: state.auth.isAuthenticating,\n      statusText: state.auth.statusText\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    signup: (email, password1, password2) => dispatch(authSignup(email, password1, password2)),\n    reset: () => dispatch(resetAuthLoginUserFailure())\n  }\n}\n  \nexport default connect(mapStateToProps, mapDispatchToProps)(RegistrationForm);\n","import React, { Component } from 'react';\nimport { Button } from 'evergreen-ui';\n\nconst useSortableData = (items, config = null) => {\n  const [sortConfig, setSortConfig] = React.useState(config);\n\n  const sortedItems = React.useMemo(() => {\n    let sortableItems = [...items];\n    if (sortConfig !== null) {\n      sortableItems.sort((a, b) => {\n        if (a[sortConfig.key] < b[sortConfig.key]) {\n          return sortConfig.direction === 'ascending' ? -1 : 1;\n        }\n        if (a[sortConfig.key] > b[sortConfig.key]) {\n          return sortConfig.direction === 'ascending' ? 1 : -1;\n        }\n        return 0;\n      });\n    }\n    return sortableItems;\n  }, [items, sortConfig]);\n\n  const requestSort = (key) => {\n    let direction = 'ascending';\n    if (\n      sortConfig &&\n      sortConfig.key === key &&\n      sortConfig.direction === 'ascending'\n    ) {\n      direction = 'descending';\n    }\n    setSortConfig({ key, direction });\n  };\n\n  return { items: sortedItems, requestSort, sortConfig };\n};\n\nconst ProductTable = (props) => {\n  const { items, requestSort, sortConfig } = useSortableData(props.products);\n  const getClassNamesFor = (name) => {\n    if (!sortConfig) {\n      return;\n    }\n    return sortConfig.key === name ? sortConfig.direction : undefined;\n  };\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th>\n            <Button \n              onClick={() => requestSort('name')}\n              className={getClassNamesFor('name')}>\n              Name\n            </Button>\n          </th>\n          <th>\n            <Button \n              onClick={() => requestSort('price')}\n              className={getClassNamesFor('price')}>\n              Price\n            </Button>\n          </th>\n          <th>\n            <Button \n              onClick={() => requestSort('stock')}\n              className={getClassNamesFor('stock')}>\n              In Stock\n            </Button>\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n      {items.map(product => (\n          <tr key={product.id}>\n            <td>{product.name}</td>\n            <td>{product.price}</td>\n            <td>{product.stock}</td>\n          </tr>\n      ))}\n      </tbody>\n    </table>\n  );\n};\n\nclass Profile extends Component {\n    render() {\n      return (\n        <div>\n          <h1>Profil</h1>\n          <ProductTable products={[ { id: 1, name: 'Cheese', price: 4.9, stock: 20 }, { id: 2, name: 'Milk', price: 1.9, stock: 32 }, { id: 3, name: 'Yoghurt', price: 2.4, stock: 12 }, { id: 4, name: 'Heavy Cream', price: 3.9, stock: 9 }, { id: 5, name: 'Butter', price: 0.9, stock: 99 }, { id: 6, name: 'Sour Cream ', price: 2.9, stock: 86 }, { id: 7, name: 'Fancy French Cheese 🇫🇷', price: 99, stock: 12 }, { id: 11, name: 'Cheese', price: 4.9, stock: 20 }, { id: 22, name: 'Milk', price: 1.9, stock: 32 }, { id: 33, name: 'Yoghurt', price: 2.4, stock: 12 }, { id: 44, name: 'Heavy Cream', price: 3.9, stock: 9 }, { id: 55, name: 'Butter', price: 0.9, stock: 99 }, { id: 66, name: 'Sour Cream ', price: 2.9, stock: 86 }, { id: 77, name: 'Fancy French Cheese 🇫🇷', price: 99, stock: 12 }, { id: 111, name: 'Cheese', price: 4.9, stock: 20 }, { id: 122, name: 'Milk', price: 1.9, stock: 32 }, { id: 133, name: 'Yoghurt', price: 2.4, stock: 12 }, { id: 144, name: 'Heavy Cream', price: 3.9, stock: 9 }, { id: 155, name: 'Butter', price: 0.9, stock: 99 }, { id: 166, name: 'Sour Cream ', price: 2.9, stock: 86 }, { id: 177, name: 'Fancy French Cheese 🇫🇷', price: 99, stock: 12 }, ]} />\n          <Button>I am using <span role=\"img\" aria-label=\"\">🌲</span> Evergreen!</Button>\n          profile\n        </div>\n      )\n    }\n  };\n  \n  export default Profile;\n","import React, { Component } from 'react';\n\nclass Notifications extends Component {\n    render() {\n      return (\n        <div>\n          <h1>Notifications</h1>\n        </div>\n      )\n    }\n  };\n  \n  export default Notifications;\n","import React, { Component } from 'react';\n\nclass Annonces extends Component {\n    render() {\n      return (\n        <div>\n          <h1>Vos Annonces</h1>\n        </div>\n      )\n    }\n  };\n  \n  export default Annonces;\n","import React, { Component } from 'react';\nimport { Link, Route, Switch } from 'react-router-dom';\n\nimport Profile from './profile/Profile';\nimport Notifications from './notifications/Notifications';\nimport Annonces from './annonces/Annonces';\n\nimport { SidebarTab, Pane, Tablist } from 'evergreen-ui';\n\nclass Account extends Component {\n\n  state = {\n    selectedIndex: null,\n    tabs: [\n      {id: 1, title:'Profil', url: '/mon-compte/profil'}, \n      {id: 2, title:'Vos annonces', url: '/mon-compte/vos-annonces'}, \n      {id: 3, title:'Notifications', url: '/mon-compte/notifications'}\n    ]\n  }\n\n  render() {\n    return (\n        <Pane display=\"flex\">\n          <Tablist marginBottom={16} flexBasis={240} marginRight={24}>\n            {this.state.tabs.map((tab, index) => (\n              <SidebarTab\n                key={tab.id}\n                id={tab.id}\n                onSelect={() => this.setState({ selectedIndex: index })}\n                isSelected={index === this.state.selectedIndex}\n                aria-controls={`panel-${tab.id}`}\n              >\n                <Link to={tab.url}>{tab.title}</Link>\n              </SidebarTab>\n            ))}\n          </Tablist>\n          <Pane padding={16} background=\"tint1\" flex=\"1\">\n            {this.state.tabs.map((tab, index) => (\n              <Pane\n                key={tab.id}\n                id={`panel-${tab.id}`}\n                role=\"tabpanel\"\n                aria-labelledby={tab.id}\n                aria-hidden={index !== this.state.selectedIndex}\n                display={index === this.state.selectedIndex ? 'block' : 'none'}\n              >\n                <Switch>\n                  <Route path=\"/mon-compte/profil\" component={Profile} />\n                  <Route path=\"/mon-compte/notifications\" component={Notifications} />\n                  <Route path=\"/mon-compte/vos-annonces\" component={Annonces} />\n                </Switch>\n              </Pane>\n            ))}\n          </Pane>\n        </Pane>\n    )\n  }\n}\n  \nexport default Account;\n","import React from 'react';\n\nfunction Search() {\n    return (\n      <div>\n          search\n      </div>\n    );\n  }\n  \n  export default Search;\n","import React from 'react';\n\nfunction StaticPage() {\n    return (\n      <div>\n          StaticPage\n      </div>\n    );\n  }\n  \n  export default StaticPage;\n","import React from 'react';\n\nfunction StaticPageDetail() {\n    return (\n      <div>\n          StaticPageDetail\n      </div>\n    );\n  }\n  \n  export default StaticPageDetail;\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport Login from './containers/auth/Login';\nimport RegistrationForm from './containers/auth/Signup';\n// import Profile from './containers/dashboard/profile/Profile';\n// import Annonces from './containers/dashboard/annonces/Annonces';\n// import Notifications from './containers/dashboard/notifications/Notifications';\nimport Account from './containers/dashboard/Account';\nimport Search from './containers/search/Search';\nimport StaticPage from './containers/static-pages/StaticPage';\nimport StaticPageDetail from './containers/static-pages/StaticPageDetail';\n\nconst BaseRouter = () => (\n    <Switch>\n        <Route exact path=\"/login\" component={Login} />\n        <Route exact path=\"/signup\" component={RegistrationForm} />\n        <Route exact path=\"/legal\" component={StaticPage} />\n        <Route exact path=\"/legal/:slug\" component={StaticPageDetail} />\n        <Route path=\"/mon-compte\" component={Account} />\n        <Route exact path=\"/\" component={Search} />\n    </Switch>\n)\n\nexport default BaseRouter;\n\n/*<Route\npath=\"/mon-compte\"\nrender={({ match: { url } }) => (\n    <>\n        <Route path={`${url}/`} component={Account} />\n        <Route path={`${url}/profil`} component={Profile} />\n        <Route path={`${url}/notifications`} component={Notifications} />\n        <Route path={`${url}/vos-annonces`} component={Annonces} />\n    </>\n)} />*/","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport CustomLayout from './containers/layout/Layout';\nimport BaseRouter from './routes'\n\nimport * as authActions from './store/actions/auth';\n\nimport './assets/styles/App.css';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <Router>\n        <CustomLayout {...this.props}>\n          <BaseRouter />\n        </CustomLayout>\n      </Router>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n      isAuthenticathed: !!state.auth.isAuthenticated\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n      onTryAutoSignup: () => dispatch(authActions.authCheckState())\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/styles/index.css';\nimport { Provider } from 'react-redux'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport configureStore from './store/configureStore';\n\nconst store = configureStore();\n\nconst app = (\n    <Provider store={store}>\n        <App />\n    </Provider>\n)\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {\n    AUTH_LOGIN_USER_REQUEST,\n    AUTH_LOGIN_USER_SUCCESS,\n    AUTH_LOGIN_USER_FAILURE,\n    AUTH_LOGOUT_USER,\n    RESET_AUTH_LOGIN_USER_FAILURE\n} from '../constants';\n\n// eslint-disable-next-line\nimport { updateObject } from '../utility'\n\n\nconst initialState = {\n    token: null,\n    userName: null,\n    isAuthenticated: false,\n    isAuthenticating: false,\n    statusText: null,\n    loading: false\n};\n\nexport default function authReducer(state = initialState, action) {\n    switch (action.type) {\n        case AUTH_LOGIN_USER_REQUEST:\n            return Object.assign({}, state, {\n                isAuthenticating: true,\n                statusText: null,\n                loading: true\n            });\n\n        case AUTH_LOGIN_USER_SUCCESS:\n            return Object.assign({}, state, {\n                isAuthenticating: false,\n                isAuthenticated: true,\n                token: action.payload.token,\n                userName: action.payload.user.email,\n                statusText: 'You have been successfully logged in.',\n                loading: false\n            });\n\n        case AUTH_LOGIN_USER_FAILURE:\n            return Object.assign({}, state, {\n                isAuthenticating: false,\n                isAuthenticated: false,\n                token: null,\n                userName: null,\n                statusText: `Authentication Error: ${action.payload.status} - ${action.payload.statusText}`,\n                loading: false\n            });\n        case RESET_AUTH_LOGIN_USER_FAILURE:\n            return Object.assign({}, state, {\n                isAuthenticated: false,\n                token: null,\n                userName: null,\n                statusText: null\n            });\n        case AUTH_LOGOUT_USER:\n            return Object.assign({}, state, {\n                isAuthenticated: false,\n                token: null,\n                userName: null,\n                statusText: 'You have been successfully logged out.'\n            });\n\n        default:\n            return state;\n    }\n}\n","import { combineReducers } from 'redux';\nimport { routerReducer } from 'react-router-redux';\nimport authReducer from './auth';\n\nexport default combineReducers({\n    auth: authReducer,\n    routing: routerReducer\n});\n","import thunk from 'redux-thunk';\nimport { applyMiddleware, createStore } from 'redux';\nimport { routerMiddleware } from 'react-router-redux';\n\nimport rootReducer from './reducers';\n\nexport default function configureStore(initialState, history) {\n    const reduxRouterMiddleware = routerMiddleware(history);\n\n    const middleware = applyMiddleware(thunk, reduxRouterMiddleware);\n\n    return createStore(rootReducer, initialState, middleware);\n}\n","export const AUTH_LOGIN_USER_REQUEST = 'AUTH_LOGIN_USER_REQUEST';\nexport const AUTH_LOGIN_USER_FAILURE = 'AUTH_LOGIN_USER_FAILURE';\nexport const AUTH_LOGIN_USER_SUCCESS = 'AUTH_LOGIN_USER_SUCCESS';\nexport const AUTH_LOGOUT_USER = 'AUTH_LOGOUT_USER';\n\nexport const RESET_AUTH_LOGIN_USER_FAILURE = 'RESET_AUTH_LOGIN_USER_FAILURE';\n","if (process.env.NODE_ENV === 'production') {\n    module.exports = require('./configureStore.prod');\n} else {\n    module.exports = require('./configureStore.dev');\n}\n"],"sourceRoot":""}